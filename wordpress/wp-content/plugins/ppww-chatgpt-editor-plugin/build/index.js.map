{"version":3,"file":"index.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACNqB;AACgE;;AAErF;;AAEAK,EAAE,CAACC,MAAM,CAACC,iBAAiB,CAAC,iCAAiC,EAAE;EAC3DC,KAAK,EAAE,sBAAsB;EAC7BC,IAAI,EAAE,eAAe;EACrBC,QAAQ,EAAE,QAAQ;EAClBC,UAAU,EAAE;IACRC,QAAQ,EAAE;MAACC,IAAI,EAAE,OAAO;MAAEC,OAAO,EAAE;IAAE;EACzC,CAAC;EACDC,IAAI,EAAEC,aAAa;EACnBC,IAAI,EAAE,SAAAA,CAAA,EAAW;IACb,OAAO,IAAI;EACf;AACJ,CAAC,CAAC;AAEF,SAASD,aAAaA,CAACE,KAAK,EAAE;EAE1B,SAASC,YAAYA,CAACC,KAAK,EAAE;IACzB,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAM,CAACC,UAAU,CAACC,aAAa,CAAC,wBAAwB,CAAC;IACvF,MAAMC,QAAQ,GAAGJ,eAAe,CAACK,KAAK,CAACC,IAAI,CAAC,CAAC;IAC7C,IAAIF,QAAQ,KAAK,EAAE,EAAE;MACjB;IACJ;IAEAG,KAAK,CAAC,kBAAkB,CAAC;IACzB,MAAMC,MAAM,GAAG;MACX,MAAM,EAAE,WAAW;MACnB,SAAS,EAAE,sCAAsC,GAAGJ;IACxD,CAAC;IACD;;IAEAJ,eAAe,CAACK,KAAK,GAAG,EAAE;IAC1BI,cAAc,CAACL,QAAQ,EAAEI,MAAM,CAAC;EACpC;EAGA,SAASC,cAAcA,CAACL,QAAQ,EAAEI,MAAM,EAAE;IAEtC;;IAEAX,KAAK,CAACa,aAAa,CAAC;MAACnB,QAAQ,EAAEM,KAAK,CAACP,UAAU,CAACC,QAAQ,CAACoB,MAAM,CAAC,CAC5D;QACI,MAAM,EAAE,MAAM;QACd,SAAS,EAAEP;MACf,CAAC,EACDI,MAAM,CACT;IAAC,CAAC,CAAC;EACR;;EAEA;;EAEA,OACII,oDAAA;IAAKC,SAAS,EAAC;EAA2B,GACrChB,KAAK,CAACP,UAAU,CAACC,QAAQ,CAACuB,GAAG,CAAEC,OAAO,IAAK;IACxC,OAAOH,oDAAA;MAAGC,SAAS,EAAE,oCAAoC,GAAGE,OAAO,CAACC;IAAK,GAAED,OAAO,CAACE,OAAW,CAAC;EACnG,CAAC,CAAC,EACFL,oDAAA,CAAC/B,uDAAI,QACD+B,oDAAA,CAAC9B,4DAAS,QACN8B,oDAAA,CAACjC,8DAAW;IAACuC,IAAI,EAAC,UAAU;IAACC,KAAK,EAAC,2BAA2B;IAACC,WAAW,EAAC;EAAoB,CAAE,CAC1F,CAAC,EACZR,oDAAA,CAAC7B,2DAAQ,QACL6B,oDAAA,CAAChC,yDAAM;IAACiC,SAAS,EAAC,kCAAkC;IAACQ,OAAO,EAAEvB;EAAa,GAAC,eAAqB,CAC3F,CACR,CACL,CAAC;AAEd,C","sources":["webpack://ppww-chatgpt-editor-plugin/./src/index.css","webpack://ppww-chatgpt-editor-plugin/external window \"React\"","webpack://ppww-chatgpt-editor-plugin/external window [\"wp\",\"components\"]","webpack://ppww-chatgpt-editor-plugin/webpack/bootstrap","webpack://ppww-chatgpt-editor-plugin/webpack/runtime/compat get default export","webpack://ppww-chatgpt-editor-plugin/webpack/runtime/define property getters","webpack://ppww-chatgpt-editor-plugin/webpack/runtime/hasOwnProperty shorthand","webpack://ppww-chatgpt-editor-plugin/webpack/runtime/make namespace object","webpack://ppww-chatgpt-editor-plugin/./src/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"components\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './index.css';\r\nimport {TextControl, Button, Flex, FlexBlock, FlexItem} from '@wordpress/components';\r\n\r\n// TODO add function to disable post save/update if block has no received answers.\r\n\r\nwp.blocks.registerBlockType('ppww/ppww-chatgpt-editor-plugin', {\r\n    title: 'ChatGPT Conversation',\r\n    icon: 'format-status',\r\n    category: 'common',\r\n    attributes: {\r\n        messages: {type: 'array', default: []},\r\n    },\r\n    edit: EditComponent,\r\n    save: function() {\r\n        return null;\r\n    },\r\n});\r\n\r\nfunction EditComponent(props) {\r\n\r\n    function sendQuestion(event) {\r\n        const questionElement = event.target.parentNode.querySelector(\"input[name='question']\");\r\n        const question = questionElement.value.trim();\r\n        if (question === '') {\r\n            return;\r\n        }\r\n\r\n        alert('Sending question');\r\n        const answer = {\r\n            'role': 'assistant',\r\n            'content': 'This is an answer to your question: ' + question,\r\n        };\r\n        // TODO add error handling later\r\n\r\n        questionElement.value = '';\r\n        updateMessages(question, answer);\r\n    }\r\n\r\n\r\n    function updateMessages(question, answer) {\r\n\r\n        // TODO adjust below format to use same format for both question and asnwer and maybe directly what's coming from api call?\r\n\r\n        props.setAttributes({messages: props.attributes.messages.concat([\r\n            {\r\n                'role': 'user',\r\n                'content': question,\r\n            },\r\n            answer,\r\n        ])});\r\n    }\r\n\r\n    // console.log(props.attributes);\r\n\r\n    return (\r\n        <div className=\"ppww-chatgpt-editor-block\">\r\n            {props.attributes.messages.map((element) => {\r\n                return <p className={'ppww-chatgpt-editor-block-message-' + element.role}>{element.content}</p>;\r\n            })}\r\n            <Flex>\r\n                <FlexBlock>\r\n                    <TextControl name=\"question\" label=\"Next question for ChatGPT\" placeholder=\"Your next question\" />\r\n                </FlexBlock>\r\n                <FlexItem>\r\n                    <Button className=\"ppww-chatgpt-editor-block-button\" onClick={sendQuestion}>Send Question</Button>\r\n                </FlexItem>\r\n            </Flex>\r\n        </div>\r\n    );\r\n}"],"names":["TextControl","Button","Flex","FlexBlock","FlexItem","wp","blocks","registerBlockType","title","icon","category","attributes","messages","type","default","edit","EditComponent","save","props","sendQuestion","event","questionElement","target","parentNode","querySelector","question","value","trim","alert","answer","updateMessages","setAttributes","concat","createElement","className","map","element","role","content","name","label","placeholder","onClick"],"sourceRoot":""}